# Data Wrangling {#sec-wrangling}

```{r}
#| message: FALSE
#| warning: FALSE
#| echo: FALSE
library(fpp3)
```

Data wrangling involves cleaning and restructuring raw data into a more organized and usable form.
The special characteristics of time series means that it is helpful to make use of a special data structure to store time series data.

A time series comprises a series of measurements along with information about when those measurements were taken (the time index).
The `tsibble` package implements a convenient data structure, the tsibble, for storing time series data.
To illustrate how they work, we create a simple example as follows.

```{r}
#| message: TRUE
#| warning: FALSE
#| output: FALSE
example1 <- tsibble(
  year = 2015:2019,               # <1>
  y = c(123, 39, 78, 52, 110),    # <2>
  index = year                    # <3>
)

str(example1)
# output:
# tbl_ts [5 Ã— 2] (S3: tbl_ts/tbl_df/tbl/data.frame)
# ...
```

1.  Creates a vector of years.
2.  `y` is the vector of values in the time series.
3.  The index column refers back to the `year` column that was just created.

Applying `str()` to the created object shows that it has class `tbl_ts` (tsibble). 
It also shows that it also inherits from `tbl_df` (tibble) and base R `data.frame`.
This means that all `dplyr` verbs (such as `filter`, `select`, and `mutate`) work as per normal.
However, there are now 3 types of columns in a tsibble:

1.  *Measurement* variables. Note that there could be more than one type of measurement at each time point.
2.  The *index* variable: a **single** column denoting the time point of each measurement.
3.  *Key* variables: a set of columns whose unique combinations define a single time series.

We discuss the second and third types in more detail.

## The index variable

The index column is what introduces the temporal component of the data. 
It is what associates the measurements in each row with a specific time point. 
The time point should be from a time class in R. 
The time points could correspond to yearly, monthly, weekly, daily and sub-daily intervals.
Consider the examples below, noting that the annotation "[1Y]", "[1M]", etc. tells us the interval between observations of each time series.

::: panel-tabset
## Annual data

```{r}
aus_airpassengers
```

Total annual air passengers (in millions) including domestic and international
aircraft passengers of air carriers registered in Australia.

## Monthly data

```{r}
us_employment
```

US employment data from January 1939 to June 2019. Each 'Series_ID' represents different sectors of the economy.

## Quarterly data

```{r}
aus_arrivals
```

Quarterly international arrivals to Australia from Japan, New Zealand, UK and
the US. 1981Q1 - 2012Q3.

## Weekly data

```{r}
us_gasoline
```

Million barrels per day, beginning Week 6, 1991, ending Week 3, 2017.
:::

The easiest way to create such a column is to use one of the convenience
functions from the `lubridate` package in R.

| Frequency | Function                   |
|-----------|----------------------------|
| Annual    | Use integers in R          |
| Quarterly | `yearquarter()`            |
| Monthly   | `yearmonth()`              |
| Weekly    | `yearweek()`               |
| Daily     | `as_date(),ymd()`          |
| Sub-daily | `as_datetime(), ymd_hms()` |

: lubridate functions for index column

## Key variables

A tsibble can store multiple time series in a single tsibble. 
It makes sense to do this when the timepoints overlap, and we wish to compare and contrast different time series.
Consider the dataset `us_employment`, containing US employment data from January 1939 to June 2019.

```{r}
#| message: TRUE
#| warning: FALSE
#| output: FALSE
us_employment
# Output:
# A tsibble: 143,412 x 4 [1M]
# # Key:       Series_ID [148]
#       Month Series_ID     Title         Employed
#       <mth> <chr>         <chr>            <dbl>
```

The printed output states that the tsibble's key is determined by a single column: `Series_ID`
Inspecting the metadata by running `help(us_employment)` tells us that each 'Series_ID' represents different sectors of the economy.
There can of course be multiple key columns, such as in `olympic_running`, which records the fastest running time for each Olympic event.

```{r}
#| message: TRUE
#| warning: FALSE
#| output: FALSE
olympic_running
# Output:
# # A tsibble: 312 x 4 [4Y]
# # Key:       Length, Sex [14]
#     Year Length Sex    Time
#    <int>  <int> <chr> <dbl>
```

The unique combinations of key columns is the number of time series in the
tsibble.


::: callout-note
-   There could be multiple measurement columns and multiple key columns in a
    tsibble.
-   There could be columns that are neither measurement nor key columns in a
    tsibble.
-   There must be exactly one index column in a tsibble.
:::

## Creating tsibbles

Time series data in the wild does not automatically occur as tsibbles.
They are instead stored as csv files or in other formats, and hence have to be converted to tsibble format.
The function `as_tsibble()` converts a tibble object into a tsibble.
It takes two arguments, `index` and `key`, which are used to specify the index and key columns respectively.
This often has to be preceded by several `dplyr` function calls on the tibble to make sure it has the appropriate format.
For an example on how to do this, refer to [Chapter 2.1](https://otexts.com/fpp3/tsibbles.html) in @hyndman2018forecasting.
